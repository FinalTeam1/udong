<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.multi.udong.member.model.dao.MemberMapper">

    <resultMap id="memberResultMap" type="memberDTO">
        <id property="memberNo" column="member_no"/>
        <result property="memberId" column="member_id"/>
        <result property="memberPw" column="member_pw"/>
        <result property="nickname" column="nickname"/>
        <result property="phone" column="phone"/>
        <result property="email" column="email"/>
        <result property="authority" column="authority"/>
        <result property="signupAt" column="signup_at"/>
        <result property="modifiedAt" column="modified_at"/>
        <result property="score" column="score"/>
        <result property="level" column="level"/>
        <result property="lastLoginAt" column="last_login_at"/>
        <result property="reportedCnt" column="reported_cnt"/>
        <result property="isBlacked" column="is_blacked"/>
        <result property="blackedAt" column="blacked_at"/>
        <result property="isDeleted" column="is_deleted"/>
        <result property="deletedAt" column="deleted_at"/>
        <result property="savedName" column="SAVED_NAME"/>
        <association property="memAddressDTO" javaType="memAddressDTO">
            <result property="memberNo" column="member_no"/>
            <result property="siDoName" column="si_do_name"/>
            <result property="siGunGuName" column="si_gun_gu_name"/>
            <result property="eupMyeonDongName" column="eup_myeon_dong_name"/>
            <result property="detailAddress" column="detail_address"/>
            <result property="locationCode" column="location_code"/>
            <result property="createdAt" column="created_at"/>
            <result property="modifiedAt" column="modified_at"/>
        </association>
    </resultMap>

    <!--시큐리티 쿼리-->
    <select id="findMemberById" resultMap="memberResultMap">
        SELECT m.*, ma.*, a.SAVED_NAME
        FROM MEMBER m
        LEFT JOIN MEM_ADDRESS ma ON m.member_no = ma.member_no
        LEFT JOIN (
            SELECT TARGET_NO, SAVED_NAME
            FROM ATTACHMENT
            WHERE TYPE_CODE = 'MEM'
            AND (TARGET_NO, FILE_NO) IN (
                SELECT TARGET_NO, MAX(FILE_NO)
                FROM ATTACHMENT
                WHERE TYPE_CODE = 'MEM'
                GROUP BY TARGET_NO
            )
        ) a ON m.member_no = a.TARGET_NO
        WHERE m.member_id = #{memberId}
        AND m.is_deleted = 'N'
        ORDER BY m.member_no DESC
        LIMIT 1
    </select>

    <select id="findMemberByNickname" resultType="memberDTO">
        SELECT nickname
        FROM MEMBER
        WHERE nickname = #{nickname}
        AND is_deleted = 'N'
    </select>

    <insert id="signup" parameterType="memberDTO" useGeneratedKeys="true" keyProperty="memberNo">
        INSERT INTO MEMBER (member_id, member_pw, nickname, phone, email) VALUES
        (#{memberId}, #{memberPw}, #{nickname}, #{phone}, #{email})
    </insert>

    <select id="getMemberNoByMemberId">
        SELECT member_no
        FROM MEMBER
        WHERE member_id = #{memberId}
        AND is_deleted = 'N'
    </select>

    <insert id="insertProfileImg">
        INSERT INTO ATTACHMENT (original_name, saved_name, type_code, target_no) VALUES
        ('defaultProfile.png', 'defaultProfile.png', 'MEM', #{memberNo})
    </insert>

    <insert id="insertNotiSet">
        INSERT INTO NOTI_SET (member_no, noti_set_code)
        SELECT #{memberNo}, noti_set_code
        FROM NOTI_SET_CODE
    </insert>

    <insert id="insertBusReg" parameterType="memBusDTO">
        INSERT INTO MEM_BUS (member_no, business_number, representative_name, opening_date) VALUES
        (#{memberNo}, #{businessNumber}, #{representativeName}, #{openingDate})
    </insert>

    <insert id="insertAttachment" parameterType="attachmentDTO">
        INSERT INTO ATTACHMENT (type_code, target_no, original_name, saved_name) VALUES
        (#{typeCode}, #{targetNo}, #{originalName}, #{savedName})
    </insert>

    <select id="findCodeByAddress" parameterType="memAddressDTO" resultType="long">
        SELECT location_code
        FROM LOCATION
        WHERE
            si_do_name = #{siDoName}
            AND si_gun_gu_name LIKE CONCAT(#{siGunGuName}, '%')
            AND eup_myeon_dong_name = #{eupMyeonDongName}
    </select>

    <insert id="insertAddress" parameterType="memAddressDTO">
        INSERT INTO MEM_ADDRESS (member_no, si_do_name, si_gun_gu_name, eup_myeon_dong_name, detail_address, location_code) VALUES
        (#{memberNo}, #{siDoName}, #{siGunGuName}, #{eupMyeonDongName}, #{detailAddress}, #{locationCode})
    </insert>

    <update id="updateAddress" parameterType="memAddressDTO">
        UPDATE MEM_ADDRESS
        SET
            si_do_name = #{siDoName},
            si_gun_gu_name = #{siGunGuName},
            eup_myeon_dong_name = #{eupMyeonDongName},
            detail_address = #{detailAddress},
            location_code = #{locationCode},
            modified_at = CURRENT_TIMESTAMP
        WHERE member_no = #{memberNo}
    </update>

    <update id="updateProfileImg" parameterType="attachmentDTO">
        UPDATE ATTACHMENT
        SET
            original_name = #{originalName},
            saved_name = #{savedName}
        WHERE
            type_code = #{typeCode}
            AND target_no = #{targetNo}
    </update>

    <update id="updateMember" parameterType="attachmentDTO">
        UPDATE MEMBER
        SET modified_at = CURRENT_TIMESTAMP
        WHERE member_no = #{targetNo}
    </update>

    <update id="updateNickname" parameterType="memberDTO">
        UPDATE MEMBER
        SET
            nickname = #{nickname},
            modified_at = CURRENT_TIMESTAMP
        WHERE member_no = #{memberNo}
    </update>

    <update id="updateEmail" parameterType="memberDTO">
        UPDATE MEMBER
        SET
            email = #{email},
            modified_at = CURRENT_TIMESTAMP
        WHERE member_no = #{memberNo}
    </update>

    <update id="updatePhone" parameterType="memberDTO">
        UPDATE MEMBER
        SET
            phone = #{phone},
            modified_at = CURRENT_TIMESTAMP
        WHERE member_no = #{memberNo}
    </update>

    <update id="updateMemberPw" parameterType="memberDTO">
        UPDATE MEMBER
        SET
            member_pw = #{memberPw},
            modified_at = CURRENT_TIMESTAMP
        WHERE member_no = #{memberNo}
    </update>

    <select id="selectNewsBoard" parameterType="pageDTO" resultType="java.util.LinkedHashMap">
        SELECT
            sub.news_no,
            nc.category_name,
            l.eup_myeon_dong_name,
            sub.title,
            DATE_FORMAT(sub.created_at, '%Y-%m-%d %H:%i:%s') AS created_at,
            sub.views,
            sub.total_count
        FROM (
            SELECT
                np.*,
                COUNT(*) OVER() AS total_count,
                ROW_NUMBER() OVER (ORDER BY np.news_no DESC) AS rownum
            FROM NS_POST np
            WHERE np.writer = #{memberNo}
            <if test="searchCategory != null and searchWord != null">
                <choose>
                    <when test="searchCategory == '주제'">
                        AND np.category_code IN (SELECT category_code FROM NS_CATEGORY WHERE category_name LIKE CONCAT('%', #{searchWord}, '%'))
                    </when>
                    <when test="searchCategory == '동네'">
                        AND np.location_code IN (SELECT location_code FROM LOCATION WHERE eup_myeon_dong_name LIKE CONCAT('%', #{searchWord}, '%'))
                    </when>
                    <when test="searchCategory == '제목'">
                        AND np.title LIKE CONCAT('%', #{searchWord}, '%')
                    </when>
                    <when test="searchCategory == '내용'">
                        AND np.content LIKE CONCAT('%', #{searchWord}, '%')
                    </when>
                </choose>
            </if>
        ) sub
        JOIN NS_CATEGORY nc ON sub.category_code = nc.category_code
        JOIN LOCATION l ON sub.location_code = l.location_code
        WHERE sub.rownum BETWEEN #{start} AND #{end}
    </select>

    <select id="selectNewsLike" parameterType="pageDTO" resultType="java.util.LinkedHashMap">
        SELECT
            sub.news_no,
            nc.category_name,
            l.eup_myeon_dong_name,
            sub.title,
            DATE_FORMAT(sub.created_at, '%Y-%m-%d %H:%i:%s') AS created_at,
            m.nickname,
            sub.views,
            sub.total_count
        FROM (
            SELECT
                np.*,
                COUNT(*) OVER() AS total_count,
                ROW_NUMBER() OVER (ORDER BY nl.liked_at DESC) AS rownum
            FROM NS_LIKE nl
            JOIN NS_POST np ON nl.news_no = np.news_no
            WHERE nl.member_no = #{memberNo}
            <if test="searchCategory != null and searchWord != null">
                <choose>
                    <when test="searchCategory == '주제'">
                        AND np.category_code IN (SELECT category_code FROM NS_CATEGORY WHERE category_name LIKE CONCAT('%', #{searchWord}, '%'))
                    </when>
                    <when test="searchCategory == '동네'">
                        AND np.location_code IN (SELECT location_code FROM LOCATION WHERE eup_myeon_dong_name LIKE CONCAT('%', #{searchWord}, '%'))
                    </when>
                    <when test="searchCategory == '제목'">
                        AND np.title LIKE CONCAT('%', #{searchWord}, '%')
                    </when>
                    <when test="searchCategory == '내용'">
                        AND np.content LIKE CONCAT('%', #{searchWord}, '%')
                    </when>
                    <when test="searchCategory == '작성자'">
                        AND np.writer IN (SELECT member_no FROM MEMBER WHERE nickname LIKE CONCAT('%', #{searchWord}, '%'))
                    </when>
                </choose>
            </if>
        ) sub
        JOIN NS_CATEGORY nc ON sub.category_code = nc.category_code
        JOIN LOCATION l ON sub.location_code = l.location_code
        JOIN MEMBER m ON sub.writer = m.member_no
        WHERE sub.rownum BETWEEN #{start} AND #{end}
    </select>

    <select id="selectNewsReply" parameterType="pageDTO" resultType="java.util.LinkedHashMap">
        SELECT
            sub.news_no,
            nc.category_name,
            l.eup_myeon_dong_name,
            np.title,
            sub.content,
            DATE_FORMAT(sub.created_at, '%Y-%m-%d %H:%i:%s') AS created_at,
            sub.total_count
        FROM (
            SELECT
                nr.news_no,
                nr.content,
                nr.created_at,
                COUNT(*) OVER() AS total_count,
                ROW_NUMBER() OVER (ORDER BY nr.created_at DESC) AS rownum
            FROM NS_REPLY nr
            WHERE nr.writer = #{memberNo}
            <if test="searchCategory != null and searchWord != null">
                <choose>
                    <when test="searchCategory == '주제'">
                        AND nr.news_no IN (SELECT news_no FROM NS_POST WHERE category_code IN (SELECT category_code FROM NS_CATEGORY WHERE category_name LIKE CONCAT('%', #{searchWord}, '%')))
                    </when>
                    <when test="searchCategory == '동네'">
                        AND nr.news_no IN (SELECT news_no FROM NS_POST WHERE location_code IN (SELECT location_code FROM LOCATION WHERE eup_myeon_dong_name LIKE CONCAT('%', #{searchWord}, '%')))
                    </when>
                    <when test="searchCategory == '제목'">
                        AND nr.news_no IN (SELECT news_no FROM NS_POST WHERE title LIKE CONCAT('%', #{searchWord}, '%'))
                    </when>
                    <when test="searchCategory == '댓글내용'">
                        AND nr.content LIKE CONCAT('%', #{searchWord}, '%')
                    </when>
                </choose>
            </if>
        ) sub
        JOIN NS_POST np ON sub.news_no = np.news_no
        JOIN NS_CATEGORY nc ON np.category_code = nc.category_code
        JOIN LOCATION l ON np.location_code = l.location_code
        WHERE sub.rownum BETWEEN #{start} AND #{end}
    </select>

    <select id="selectClub" parameterType="pageDTO" resultType="java.util.LinkedHashMap">
        SELECT
            sub.club_no,
            cc.category_name,
            l.eup_myeon_dong_name,
            sub.club_name,
            m.nickname AS master_nickname,
            DATE_FORMAT(sub.created_at, '%Y-%m-%d %H:%i:%s') AS created_at,
            sub.total_count
        FROM (
            SELECT
                c.*,
                COUNT(*) OVER() AS total_count,
                ROW_NUMBER() OVER (ORDER BY c.created_at DESC) AS rownum
            FROM CL c
            JOIN CL_MEMBER cm ON c.club_no = cm.club_no
            WHERE cm.member_no = #{memberNo}
            AND cm.join_status = 'Y'
            AND c.is_deleted = 'N'
            <if test="searchCategory != null and searchWord != null">
                <choose>
                    <when test="searchCategory == '주제'">
                        AND c.category_code IN (SELECT category_code FROM CL_CATEGORY WHERE category_name LIKE CONCAT('%', #{searchWord}, '%'))
                    </when>
                    <when test="searchCategory == '동네'">
                        AND c.location_code IN (SELECT location_code FROM LOCATION WHERE eup_myeon_dong_name LIKE CONCAT('%', #{searchWord}, '%'))
                    </when>
                    <when test="searchCategory == '모임명'">
                        AND c.club_name LIKE CONCAT('%', #{searchWord}, '%')
                    </when>
                    <when test="searchCategory == '모임장'">
                        AND c.master IN (SELECT member_no FROM MEMBER WHERE nickname LIKE CONCAT('%', #{searchWord}, '%'))
                    </when>
                </choose>
            </if>
        ) sub
        JOIN CL_CATEGORY cc ON sub.category_code = cc.category_code
        JOIN LOCATION l ON sub.location_code = l.location_code
        JOIN MEMBER m ON sub.master = m.member_no
        WHERE sub.rownum BETWEEN #{start} AND #{end}
    </select>

    <select id="selectClubLog" parameterType="pageDTO" resultType="java.util.LinkedHashMap">
        SELECT
            sub.log_no,
            sub.club_no,
            cc.category_name,
            l.eup_myeon_dong_name,
            c.club_name,
            sub.title,
            DATE_FORMAT(sub.created_at, '%Y-%m-%d %H:%i:%s') AS created_at,
            sub.views,
            sub.total_count
        FROM (
            SELECT
                cl.*,
                COUNT(*) OVER() AS total_count,
                ROW_NUMBER() OVER (ORDER BY cl.created_at DESC) AS rownum
            FROM CL_LOG cl
            JOIN CL c ON cl.club_no = c.club_no
            WHERE cl.writer = #{memberNo}
            AND c.is_deleted = 'N'
            <if test="searchCategory != null and searchWord != null">
                <choose>
                    <when test="searchCategory == '주제'">
                        AND cl.club_no IN (SELECT club_no FROM CL WHERE category_code IN (SELECT category_code FROM CL_CATEGORY WHERE category_name LIKE CONCAT('%', #{searchWord}, '%')))
                    </when>
                    <when test="searchCategory == '동네'">
                        AND cl.club_no IN (SELECT club_no FROM CL WHERE location_code IN (SELECT location_code FROM LOCATION WHERE eup_myeon_dong_name LIKE CONCAT('%', #{searchWord}, '%')))
                    </when>
                    <when test="searchCategory == '모임명'">
                        AND cl.club_no IN (SELECT club_no FROM CL WHERE club_name LIKE CONCAT('%', #{searchWord}, '%'))
                    </when>
                    <when test="searchCategory == '제목'">
                        AND cl.title LIKE CONCAT('%', #{searchWord}, '%')
                    </when>
                    <when test="searchCategory == '내용'">
                        AND cl.content LIKE CONCAT('%', #{searchWord}, '%')
                    </when>
                </choose>
            </if>
        ) sub
        JOIN CL c ON sub.club_no = c.club_no
        JOIN CL_CATEGORY cc ON c.category_code = cc.category_code
        JOIN LOCATION l ON c.location_code = l.location_code
        WHERE sub.rownum BETWEEN #{start} AND #{end}
    </select>

    <select id="selectClubSchedule" parameterType="pageDTO" resultType="java.util.LinkedHashMap">
        SELECT
            sub.schedule_no,
            cc.category_name,
            l.eup_myeon_dong_name,
            c.club_name,
            sub.title,
            m.nickname,
            DATE_FORMAT(sub.gathering_at, '%Y-%m-%d %H:%i:%s') AS gathering_at,
            sub.total_count
        FROM (
            SELECT
                cs.*,
                COUNT(*) OVER() AS total_count,
                ROW_NUMBER() OVER (ORDER BY cs.gathering_at DESC) AS rownum
            FROM CL_SCHEDULE cs
            JOIN CL c ON cs.club_no = c.club_no
            WHERE cs.maker = #{memberNo}
            AND c.is_deleted = 'N'
            <if test="searchCategory != null and searchWord != null">
                <choose>
                    <when test="searchCategory == '주제'">
                        AND cs.club_no IN (SELECT club_no FROM CL WHERE category_code IN (SELECT category_code FROM CL_CATEGORY WHERE category_name LIKE CONCAT('%', #{searchWord}, '%')))
                    </when>
                    <when test="searchCategory == '동네'">
                        AND cs.club_no IN (SELECT club_no FROM CL WHERE location_code IN (SELECT location_code FROM LOCATION WHERE eup_myeon_dong_name LIKE CONCAT('%', #{searchWord}, '%')))
                    </when>
                    <when test="searchCategory == '모임명'">
                        AND cs.club_no IN (SELECT club_no FROM CL WHERE club_name LIKE CONCAT('%', #{searchWord}, '%'))
                    </when>
                    <when test="searchCategory == '제목'">
                        AND cs.title LIKE CONCAT('%', #{searchWord}, '%')
                    </when>
                    <when test="searchCategory == '작성자'">
                        AND cs.maker IN (SELECT member_no FROM MEMBER WHERE nickname LIKE CONCAT('%', #{searchWord}, '%'))
                    </when>
                </choose>
            </if>
        ) sub
        JOIN CL c ON sub.club_no = c.club_no
        JOIN CL_CATEGORY cc ON c.category_code = cc.category_code
        JOIN LOCATION l ON c.location_code = l.location_code
        JOIN MEMBER m ON sub.maker = m.member_no
        WHERE sub.rownum BETWEEN #{start} AND #{end}
    </select>

    <select id="selectShareLike" parameterType="pageDTO" resultType="java.util.LinkedHashMap">
    SELECT
        sub.item_no,
        sc.cat_name,
        l.eup_myeon_dong_name,
        sub.title,
        DATE_FORMAT(sub.expiry_date, '%Y-%m-%d %H:%i:%s') AS expiry_date,
        ss.status_name,
        sub.total_count
    FROM (
        SELECT
            si.*,
            sl.like_no,
            COUNT(*) OVER() AS total_count,
            ROW_NUMBER() OVER (ORDER BY sl.like_no DESC) AS rownum
        FROM SHA_LIKE sl
        JOIN SHA_ITEMS si ON sl.item_no = si.item_no
        WHERE sl.member_no = #{memberNo}
        <if test="searchCategory != null and searchWord != null">
            <choose>
                <when test="searchCategory == '카테고리'">
                    AND si.item_cat_code IN (SELECT cat_code FROM SHA_CAT WHERE cat_name LIKE CONCAT('%', #{searchWord}, '%'))
                </when>
                <when test="searchCategory == '동네'">
                    AND si.loc_code IN (SELECT location_code FROM LOCATION WHERE eup_myeon_dong_name LIKE CONCAT('%', #{searchWord}, '%'))
                </when>
                <when test="searchCategory == '제목'">
                    AND si.title LIKE CONCAT('%', #{searchWord}, '%')
                </when>
            </choose>
        </if>
    ) sub
    JOIN SHA_CAT sc ON sub.item_cat_code = sc.cat_code
    JOIN LOCATION l ON sub.loc_code = l.location_code
    JOIN SHA_STATUS ss ON sub.status_code = ss.status_code
    WHERE sub.rownum BETWEEN #{start} AND #{end}
    </select>

    <select id="selectSaleBoard" parameterType="pageDTO" resultType="java.util.LinkedHashMap">
        SELECT
            sub.sale_no,
            l.eup_myeon_dong_name,
            sub.title,
            sub.original_price,
            sub.sale_price,
            DATE_FORMAT(sub.created_at, '%Y-%m-%d %H:%i:%s') AS created_at,
            DATE_FORMAT(sub.started_at, '%Y-%m-%d %H:%i:%s') AS started_at,
            DATE_FORMAT(sub.ended_at, '%Y-%m-%d %H:%i:%s') AS ended_at,
            sub.total_count
        FROM (
            SELECT
                s.*,
                COUNT(*) OVER() AS total_count,
                ROW_NUMBER() OVER (ORDER BY s.created_at DESC) AS rownum
            FROM SAL s
            WHERE s.writer = #{memberNo}
            <if test="searchCategory != null and searchWord != null">
                <choose>
                    <when test="searchCategory == '동네'">
                        AND s.location_code IN (SELECT location_code FROM LOCATION WHERE eup_myeon_dong_name LIKE CONCAT('%', #{searchWord}, '%'))
                    </when>
                    <when test="searchCategory == '물품명'">
                        AND s.title LIKE CONCAT('%', #{searchWord}, '%')
                    </when>
                </choose>
            </if>
        ) sub
        JOIN LOCATION l ON sub.location_code = l.location_code
        WHERE sub.rownum BETWEEN #{start} AND #{end}
    </select>

    <select id="getDashboardSummary" resultType="map">
        SELECT
            (SELECT COUNT(*) FROM SHA_ITEMS WHERE owner_no = #{memberNo} AND item_group = 'RENT' AND deleted_at IS NULL) as lend_count,
            (SELECT COUNT(*) FROM SHA_REQ WHERE rqst_no = #{memberNo}) as rent_count,
            (SELECT COUNT(*) FROM SHA_ITEMS WHERE owner_no = #{memberNo} AND item_group = 'GIVE' AND deleted_at IS NULL) as give_count,
            (SELECT COUNT(*) FROM CL_MEMBER WHERE member_no = #{memberNo} AND join_status = 'Y') as club_count,
            COALESCE((SELECT AVG(rating) FROM SHA_EVAL WHERE eve_no = #{memberNo}), 0) as avg_rating,
            (SELECT level FROM MEMBER WHERE member_no = #{memberNo}) as member_level
    </select>

    <select id="getNewsData" resultType="map">
        SELECT news_no, title, created_at
        FROM NS_POST
        WHERE writer = #{memberNo}
        AND is_deleted = 'N'
        ORDER BY created_at DESC
        LIMIT 3
    </select>

    <select id="getLendData" resultType="map">
        SELECT i.item_no, i.title, i.expiry_date, s.status_name
        FROM SHA_ITEMS i
        JOIN SHA_STATUS s ON i.status_code = s.status_code
        WHERE i.owner_no = #{memberNo}
        AND i.item_group = 'RENT'
        AND i.deleted_at IS NULL
        ORDER BY i.created_at DESC
        LIMIT 3
    </select>

    <select id="getRentData" resultType="map">
        SELECT si.item_no, si.title, sr.return_date, ss.status_name
        FROM SHA_REQ sr
        JOIN SHA_ITEMS si ON sr.req_item = si.item_no
        JOIN SHA_STATUS ss ON sr.status_code = ss.status_code
        WHERE sr.rqst_no = #{memberNo}
        ORDER BY sr.created_at DESC
        LIMIT 3
    </select>

    <select id="getGiveData" resultType="map">
        SELECT i.item_no, i.title, i.created_at, s.status_name
        FROM SHA_ITEMS i
        JOIN SHA_STATUS s ON i.status_code = s.status_code
        WHERE i.owner_no = #{memberNo}
        AND i.item_group = 'GIVE'
        AND i.deleted_at IS NULL
        ORDER BY i.created_at DESC
        LIMIT 3
    </select>

    <select id="getClubData" resultType="map">
        SELECT
            c.club_no,
            c.club_name,
            c.max_personnel,
            (SELECT COUNT(*) FROM CL_MEMBER WHERE club_no = c.club_no AND join_status = 'Y') AS current_members
        FROM CL c
        JOIN CL_MEMBER cm ON c.club_no = cm.club_no
        WHERE cm.member_no = #{memberNo}
        AND c.is_deleted = 'N'
        AND cm.join_status = 'Y'
        ORDER BY c.created_at DESC
        LIMIT 3
    </select>

    <select id="getScheduleData" resultType="map">
        SELECT cs.schedule_no, cs.club_no, cs.title, cs.gathering_at, c.club_name
        FROM CL_SCHEDULE cs
        JOIN CL_SCHEDULE_PARTICIPANT csp ON cs.schedule_no = csp.schedule_no
        JOIN CL c ON cs.club_no = c.club_no
        WHERE csp.member_no = #{memberNo}
        AND cs.gathering_at > NOW()
        AND cs.is_deleted = 'N'
        AND c.is_deleted = 'N'
        ORDER BY cs.gathering_at ASC
        LIMIT 3
    </select>

    <update id="deleteMember" parameterType="int">
        UPDATE MEMBER
        SET
            is_deleted = 'Y',
            deleted_at = CURRENT_TIMESTAMP
        WHERE member_no = #{memberNo}
    </update>

    <select id="checkMember" parameterType="int" resultType="map">
        SELECT
            (SELECT COUNT(*)
                FROM SHA_ITEMS si
                JOIN SHA_REQ sr ON si.item_no = sr.req_item
                WHERE si.owner_no = #{memberNo}
                AND si.item_group = 'RENT'
                AND sr.status_code = 'RNT') AS renting_count,
            (SELECT COUNT(*)
                FROM SHA_ITEMS
                WHERE owner_no = #{memberNo}
                AND item_group = 'GIVE'
                AND status_code = 'GIV') AS giving_count,
            (SELECT COUNT(*)
                FROM CL
                WHERE master = #{memberNo}
                AND is_deleted = 'N') AS master_count
    </select>

    <select id="checkMemBus" resultType="long">
        SELECT business_number
        FROM MEM_BUS
        WHERE member_no = #{memberNo}
    </select>

    <delete id="deleteMemBus">
        DELETE FROM MEM_BUS
        WHERE member_no = #{memberNo}
    </delete>

    <update id="updateLastLoginAt">
        UPDATE MEMBER
        SET last_login_at = CURRENT_TIMESTAMP
        WHERE member_id = #{memberId}
    </update>

    <select id="getMemberInfo" resultMap="memberResultMap">
        SELECT m.*, ma.eup_myeon_dong_name, a.saved_name
        FROM member m
        LEFT JOIN mem_address ma ON m.member_no = ma.member_no
        LEFT JOIN (
            SELECT target_no, saved_name
            FROM ATTACHMENT
            WHERE type_code = 'MEM'
            AND (target_no, file_no) IN (
                SELECT target_no, MAX(file_no)
                FROM ATTACHMENT
                WHERE type_code = 'MEM'
                GROUP BY target_no
            )
        ) a ON m.member_no = a.target_no
        WHERE m.member_no = #{memberNo}
    </select>
</mapper>
