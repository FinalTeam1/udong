<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.multi.udong.message.model.dao.MessageMapper">

    <select id="getReceivedMessages" resultType="messageDTO" parameterType="pageDTO">
        SELECT
            sub.message_no,
            sub.sender_no,
            m.nickname AS sender_nickname,
            sub.content,
            sub.created_at,
            sub.is_read,
            sub.total_count
        FROM (
            SELECT
                msg.*,
                COUNT(*) OVER() AS total_count,
                ROW_NUMBER() OVER (ORDER BY
                    CASE WHEN msg.is_read = 'N' THEN 0 ELSE 1 END,
                    msg.created_at DESC) AS rownum
            FROM MSG msg
            WHERE msg.receiver_no = #{memberNo}
            AND msg.is_receive_deleted = 'N'
            <if test="searchCategory != null and searchWord != null">
                <choose>
                    <when test="searchCategory == '보낸 사람'">
                        AND msg.sender_no IN (SELECT member_no FROM MEMBER WHERE nickname LIKE CONCAT('%', #{searchWord}, '%'))
                    </when>
                    <when test="searchCategory == '내용'">
                        AND msg.content LIKE CONCAT('%', #{searchWord}, '%')
                    </when>
                </choose>
            </if>
        ) sub
        JOIN MEMBER m ON sub.sender_no = m.member_no
        WHERE sub.rownum BETWEEN #{start} AND #{end}
    </select>

    <select id="getSentMessages" resultType="messageDTO" parameterType="pageDTO">
        SELECT
            sub.message_no,
            sub.receiver_no,
            m.nickname AS receiver_nickname,
            sub.content,
            sub.created_at,
            sub.is_read,
            sub.total_count
        FROM (
            SELECT
                msg.*,
                COUNT(*) OVER() AS total_count,
                ROW_NUMBER() OVER (ORDER BY msg.created_at DESC) AS rownum
            FROM MSG msg
            WHERE msg.sender_no = #{memberNo}
            AND msg.is_send_deleted = 'N'  -- 추가된 조건
            <if test="searchCategory != null and searchWord != null">
                <choose>
                    <when test="searchCategory == '받은 사람'">
                        AND msg.receiver_no IN (SELECT member_no FROM MEMBER WHERE nickname LIKE CONCAT('%', #{searchWord}, '%'))
                    </when>
                    <when test="searchCategory == '내용'">
                        AND msg.content LIKE CONCAT('%', #{searchWord}, '%')
                    </when>
                </choose>
            </if>
        ) sub
        JOIN MEMBER m ON sub.receiver_no = m.member_no
        WHERE sub.rownum BETWEEN #{start} AND #{end}
    </select>
    
    <select id="getNicknameByMemberNo" resultType="string">
        SELECT nickname
        FROM MEMBER
        WHERE member_no = #{receiverNo}
    </select>

    <select id="getMemberNoByNickname" resultType="int">
        SELECT member_no
        FROM MEMBER
        WHERE nickname = #{receiverNickname}
        AND is_deleted = 'N'
    </select>

    <insert id="sendMessage" parameterType="messageDTO">
        INSERT INTO MSG (sender_no, receiver_no, content, is_read, is_receive_deleted)
        SELECT
        #{senderNo},
            (SELECT member_no
            FROM MEMBER
            WHERE nickname = #{receiverNickname}
            AND is_deleted = 'N'),
        #{content},
        #{isRead},
        #{isReceiveDeleted}
    </insert>

    <select id="getInsertedMessage" resultType="messageDTO">
        SELECT M.*, MB.nickname AS receiverNickname
        FROM MSG M
        JOIN MEMBER MB ON M.receiver_no = MB.member_no
        WHERE M.sender_no = #{senderNo}
            AND M.receiver_no = #{receiverNo}
            AND M.is_read = 'N'
        ORDER BY M.created_at DESC LIMIT 1
    </select>

    <delete id="deleteReceiveMessages" parameterType="list">
        UPDATE MSG
        SET is_receive_deleted = 'Y'
        WHERE message_no IN
        <foreach item="messageNo" collection="list" open="(" separator="," close=")">
            #{messageNo}
        </foreach>
    </delete>

    <update id="deleteSendMessages" parameterType="list">
        UPDATE MSG
        SET is_send_deleted = 'Y'
        WHERE message_no IN
        <foreach item="messageNo" collection="list" open="(" separator="," close=")">
            #{messageNo}
        </foreach>
    </update>

    <insert id="blockMessages" parameterType="int">
        INSERT INTO MSG_BLOCK (blocker_no, blocked_no)
        SELECT #{blockerNo}, #{blockedNo}
        FROM MEMBER
        WHERE member_no = #{blockedNo}
        AND is_deleted = 'N'
    </insert>

    <delete id="unblockMessages" parameterType="int">
        DELETE FROM MSG_BLOCK
        WHERE blocker_no = #{blockerNo} AND blocked_no = #{blockedNo}
    </delete>

    <select id="getMessageDetail" resultType="messageDTO">
        SELECT
            msg.*,
            s.nickname AS sender_nickname,
            r.nickname AS receiver_nickname
        FROM MSG msg
        LEFT JOIN MEMBER s ON msg.sender_no = s.member_no
        LEFT JOIN MEMBER r ON msg.receiver_no = r.member_no
        WHERE msg.message_no = #{messageNo}
    </select>

    <update id="updateMessageIsRead">
        UPDATE MSG SET is_read = 'Y' WHERE message_no = #{messageNo}
    </update>

    <select id="getIsBlocked" parameterType="messageDTO" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM MSG_BLOCK
        WHERE blocker_no = #{receiverNo}
        AND blocked_no = #{senderNo}
    </select>

    <select id="isAdmin" resultType="string">
        SELECT authority FROM member WHERE member_no = #{blocked_no}
    </select>

    <select id="getBlockList" parameterType="pageDTO" resultType="messageBlockDTO">
        SELECT
            sub.blocked_no,
            m.nickname AS blocked_nickname,
            sub.created_at,
            sub.total_count
        FROM (
            SELECT
                mb.*,
                COUNT(*) OVER() AS total_count,
                ROW_NUMBER() OVER (ORDER BY mb.created_at DESC) AS rownum
            FROM MSG_BLOCK mb
            WHERE mb.blocker_no = #{memberNo}
        ) sub
        JOIN MEMBER m ON sub.blocked_no = m.member_no
        WHERE sub.rownum BETWEEN #{start} AND #{end}
        ORDER BY sub.created_at DESC
    </select>

    <select id="getMessage" resultType="messageDTO">
        SELECT
            msg.*,
            m.nickname AS sender_nickname
        FROM MSG msg
        LEFT JOIN MEMBER m ON msg.sender_no = m.member_no
        WHERE msg.receiver_no = #{receiverNo}
        AND msg.is_receive_deleted = 'N'
        ORDER BY msg.is_read DESC, msg.created_at ASC
    </select>

    <select id="getUnreadMessageCount" resultType="int">
        SELECT COUNT(*)
        FROM MSG
        WHERE receiver_no = #{receiverNo}
        AND is_read = 'N'
    </select>

    <update id="markAllAsReadMessage">
        UPDATE MSG
        SET is_read = 'Y'
        WHERE receiver_no = #{receiverNo}
        AND is_read = 'N'
    </update>

</mapper>
