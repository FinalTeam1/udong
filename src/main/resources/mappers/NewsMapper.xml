<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="newsMapper">

    <resultMap id="newsResultMap" type="com.multi.udong.news.model.dto.NewsDTO">

        <id property="newsNo" column="news_no"/>

        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="views" column="views"/>
        <result property="createdAt" column="created_at"/>
        <result property="modifiedAt" column="modified_at"/>
        <result property="repliesCount" column="replies_count"/>
        <result property="likesCount" column="likes_count"/>
        <result property="viewerLike" column="viewer_news_like"/>
        <result property="isDeleted" column="is_deleted"/>
        <result property="deletedAt" column="deleted_at"/>

        <association property="category" resultMap="categoryResultMap"/>
        <association property="location" resultMap="locationResultMap"/>
        <association property="writer" resultMap="newsWriterResultMap"/>

        <collection property="attachments" resultMap="attachmentResultMap"/>
        <collection property="likes" resultMap="newsLikeResultMap"/>
        <collection property="replies" resultMap="newsReplyResultMap"/>

    </resultMap>

    <resultMap id="categoryResultMap" type="com.multi.udong.news.model.dto.CategoryDTO">

        <id property="categoryCode" column="category_code"/>
        <result property="categoryName" column="category_name"/>

    </resultMap>

    <resultMap id="locationResultMap" type="com.multi.udong.common.model.dto.LocationDTO">

        <id property="locationCode" column="location_code"/>
        <result property="siDoName" column="si_do_name"/>
        <result property="siGunGuName" column="si_gun_gu_name"/>
        <result property="eupMyeonDongName" column="eup_myeon_dong_name"/>

    </resultMap>

    <resultMap id="newsWriterResultMap" type="com.multi.udong.news.model.dto.MemberDTO">

        <id property="memberNo" column="news_writer"/>
        <result property="nickname" column="news_writer_nickname"/>
        <result property="profileSavedName" column="profile_saved_name"/>

    </resultMap>

    <resultMap id="attachmentResultMap" type="com.multi.udong.common.model.dto.AttachmentDTO">

        <id property="fileNo" column="file_no"/>
        <result property="typeCode" column="type_code"/>
        <result property="targetNo" column="target_no"/>
        <result property="originalName" column="original_name"/>
        <result property="savedName" column="saved_name"/>

    </resultMap>

    <resultMap id="newsLikeResultMap" type="com.multi.udong.news.model.dto.LikeDTO">

        <id property="newsNo" column="liked_news_no"/>
        <id property="memberNo" column="news_like_member_no"/>
        <result property="likedAt" column="news_liked_at"/>

    </resultMap>

    <resultMap id="newsReplyResultMap" type="com.multi.udong.news.model.dto.ReplyDTO">

        <id property="replyNo" column="reply_no"/>

        <result property="newsNo" column="replied_news_no"/>
        <result property="content" column="reply_content"/>
        <result property="createdAt" column="reply_created_at"/>
        <result property="modifiedAt" column="reply_modified_at"/>
        <result property="viewerLike" column="viewer_reply_like"/>
        <result property="likesCount" column="reply_likes_count"/>

        <association property="writer" resultMap="replyWriterResultMap"/>

        <collection property="likes" resultMap="replyLikeResultMap"/>

    </resultMap>

    <resultMap id="replyWriterResultMap" type="com.multi.udong.news.model.dto.MemberDTO">

        <id property="memberNo" column="reply_writer"/>
        <result property="nickname" column="reply_writer_nickname"/>

    </resultMap>

    <resultMap id="replyLikeResultMap" type="com.multi.udong.news.model.dto.LikeDTO">

        <id property="replyNo" column="liked_reply_no"/>
        <id property="memberNo" column="reply_like_member_no"/>
        <result property="likedAt" column="reply_liked_at"/>

    </resultMap>



    <select id="checkIsNewsDeleted" parameterType="Integer" resultType="String">
        SELECT is_deleted
        FROM NS_POST
        WHERE news_no = #{ newsNo }
    </select>

    <select id="checkReplyWriter" parameterType="Integer" resultType="Integer">
        SELECT writer
        FROM NS_REPLY
        WHERE reply_no = #{ replyNo }
    </select>

    <select id="selectNewsList" parameterType="com.multi.udong.news.model.dto.FilterDTO" resultMap="newsResultMap">
        SELECT
            NS.news_no,
            NS.title,
            NS.content,
            NS.views,
            NS.created_at,
            NSC.category_name,
            L.eup_myeon_dong_name,
            M.nickname AS news_writer_nickname,
            (SELECT COUNT(*) FROM NS_LIKE NSL WHERE NSL.news_no = NS.news_no) AS likes_count,
            (SELECT COUNT(*) FROM NS_REPLY NSR WHERE NSR.news_no = NS.news_no) AS replies_count,
            (SELECT ATM.saved_name FROM ATTACHMENT ATM WHERE ATM.type_code = 'NS' AND ATM.target_no = NS.news_no ORDER BY ATM.file_no LIMIT 1) AS saved_name
        FROM NS_POST NS
        LEFT JOIN NS_CATEGORY NSC ON NSC.category_code = NS.category_code
        LEFT JOIN LOCATION L ON L.location_code = NS.location_code
        LEFT JOIN MEMBER M ON M.member_no = NS.writer
        WHERE NS.is_deleted = 'N' AND NS.location_code = #{ locationCode }
        <if test="categoryCode != 'ALL' and categoryCode != null and categoryCode != ''">
            AND NS.category_code = #{ categoryCode }
        </if>
        <if test="searchWord != null and searchWord != ''">
            AND (
            NS.title LIKE CONCAT('%', #{ searchWord }, '%')
            OR NS.content LIKE CONCAT('%', #{ searchWord }, '%')
            )
        </if>
        ORDER BY NS.news_no DESC
        LIMIT #{ startIndex }, #{ pageCount }
    </select>

    <select id="selectNewsCount" parameterType="com.multi.udong.news.model.dto.FilterDTO" resultType="Integer">
        SELECT COUNT(*) FROM NS_POST
        WHERE is_deleted = 'N'
        <if test="categoryCode != 'ALL' and categoryCode != null and categoryCode != ''">
            AND category_code = #{ categoryCode }
        </if>
        <if test="searchWord != null and searchWord != ''">
            AND (
            title LIKE CONCAT('%', #{ searchWord }, '%')
            OR content LIKE CONCAT('%', #{ searchWord }, '%')
            )
        </if>
    </select>

    <select id="selectCategoryList" resultMap="categoryResultMap">
        SELECT
            category_code,
            category_name
        FROM NS_CATEGORY
        ORDER BY
            CASE
                WHEN category_code = 'ETC' THEN 1
                ELSE 0
            END,
        category_code;
    </select>

    <insert id="insertNews" parameterType="com.multi.udong.news.model.dto.NewsDTO" useGeneratedKeys="true" keyProperty="newsNo">
        INSERT INTO NS_POST
            (category_code, location_code, title, content, writer)
        VALUES
            (
            #{ category.categoryCode },
            #{ location.locationCode },
            #{ title },
            #{ content },
            #{ writer.memberNo }
            )
    </insert>

    <insert id="insertNewsImg" parameterType="com.multi.udong.common.model.dto.AttachmentDTO">
        INSERT INTO ATTACHMENT
            (type_code, target_no, original_name, saved_name)
        VALUES
            (
            #{ typeCode },
            #{ targetNo },
            #{ originalName },
            #{ savedName }
            )
    </insert>

    <update id="addNewsViews" parameterType="Integer">
        UPDATE NS_POST
        SET views = views + 1
        WHERE news_no = #{ newsNo }
    </update>

    <select id="selectNewsDetail" parameterType="com.multi.udong.news.model.dto.RequestDTO" resultMap="newsResultMap">
        SELECT
            NS.*,
            NSC.category_name,
            L.eup_myeon_dong_name,
            NS.writer AS news_writer,
            M.nickname AS news_writer_nickname,
            (SELECT saved_name FROM ATTACHMENT ATM WHERE ATM.type_code = 'MEM' AND ATM.target_no = NS.writer) AS profile_saved_name,
            NSR.reply_no,
            NSR.content AS reply_content,
            NSR.writer AS reply_writer,
            (SELECT nickname FROM MEMBER M WHERE M.member_no = NSR.writer) AS reply_writer_nickname,
            NSR.created_at AS reply_created_at,
            (SELECT COUNT(*) FROM NS_REPLY_LIKE NSRL WHERE NSRL.reply_no = NSR.reply_no) AS reply_likes_count,
            (SELECT COUNT(*) FROM NS_REPLY_LIKE NSRL WHERE NSRL.reply_no = NSR.reply_no AND NSRL.member_no = #{ memberNo }) AS viewer_reply_like,
            ATM.*,
            (SELECT COUNT(*) FROM NS_LIKE NSL WHERE NSL.news_no = NS.news_no) AS likes_count,
            (SELECT COUNT(*) FROM NS_REPLY NSR WHERE NSR.news_no = NS.news_no) AS replies_count,
            (SELECT COUNT(*) FROM NS_LIKE NSL WHERE NSL.news_no = NS.news_no AND NSL.member_no = #{ memberNo }) AS viewer_news_like
        FROM NS_POST NS
        LEFT JOIN NS_CATEGORY NSC ON NSC.category_code = NS.category_code
        LEFT JOIN LOCATION L ON L.location_code = NS.location_code
        LEFT JOIN MEMBER M ON M.member_no = NS.writer
        LEFT JOIN NS_REPLY NSR ON NSR.news_no = NS.news_no
        LEFT JOIN ATTACHMENT ATM ON ATM.type_code = 'NS' AND ATM.target_no = NS.news_no
        WHERE NS.news_no = #{ newsNo }
    </select>

    <insert id="insertNewsLike" parameterType="com.multi.udong.news.model.dto.LikeDTO">
        INSERT INTO NS_LIKE
            (news_no, member_no)
        VALUES
            (
            #{ newsNo },
            #{ memberNo }
            )
    </insert>

    <delete id="deleteNewsLike" parameterType="com.multi.udong.news.model.dto.LikeDTO">
        DELETE FROM NS_LIKE
        WHERE news_no = #{ newsNo } AND member_no = #{ memberNo }
    </delete>

    <insert id="insertReply" parameterType="com.multi.udong.news.model.dto.ReplyDTO">
        INSERT INTO NS_REPLY
            (news_no, content, writer)
        VALUES
            (
            #{ newsNo },
            #{ content },
            #{ writer.memberNo }
            )
    </insert>

    <update id="updateReply" parameterType="com.multi.udong.news.model.dto.ReplyDTO">
        UPDATE NS_REPLY
        SET
            content = #{ content }
        WHERE reply_no = #{ replyNo } AND news_no = #{ newsNo } AND writer = #{ writer.memberNo }
    </update>

    <delete id="deleteReply" parameterType="com.multi.udong.news.model.dto.ReplyDTO">
        DELETE FROM NS_REPLY
        WHERE reply_no = #{ replyNo } AND news_no = #{ newsNo } AND writer = #{ writer.memberNo }
    </delete>

    <insert id="insertReplyLike" parameterType="com.multi.udong.news.model.dto.LikeDTO">
        INSERT INTO NS_REPLY_LIKE
            (reply_no, member_no)
        VALUES
            (
            #{ replyNo },
            #{ memberNo }
            )
    </insert>

    <delete id="deleteReplyLike" parameterType="com.multi.udong.news.model.dto.LikeDTO">
        DELETE FROM NS_REPLY_LIKE
        WHERE reply_no = #{ replyNo } AND member_no = #{ memberNo }
    </delete>

</mapper>