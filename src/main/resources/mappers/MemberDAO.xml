<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.multi.udong.member.model.dao.MemberDAO">

    <resultMap id="memberResultMap" type="memberDTO">
        <id property="memberNo" column="member_no"/>
        <result property="memberId" column="member_id"/>
        <result property="memberPw" column="member_pw"/>
        <result property="nickname" column="nickname"/>
        <result property="phone" column="phone"/>
        <result property="email" column="email"/>
        <result property="authority" column="authority"/>
        <result property="signupAt" column="signup_at"/>
        <result property="modifiedAt" column="modified_at"/>
        <result property="score" column="score"/>
        <result property="level" column="level"/>
        <result property="lastLoginAt" column="last_login_at"/>
        <result property="reportedCnt" column="reported_cnt"/>
        <result property="isBlacked" column="is_blacked"/>
        <result property="blackedAt" column="blacked_at"/>
        <result property="isDeleted" column="is_deleted"/>
        <result property="deletedAt" column="deleted_at"/>
        <result property="savedName" column="SAVED_NAME"/>
        <association property="memAddressDTO" javaType="memAddressDTO">
            <result property="memberNo" column="member_no"/>
            <result property="siDoName" column="si_do_name"/>
            <result property="siGunGuName" column="si_gun_gu_name"/>
            <result property="eupMyeonDongName" column="eup_myeon_dong_name"/>
            <result property="detailAddress" column="detail_address"/>
            <result property="locationCode" column="location_code"/>
            <result property="createdAt" column="created_at"/>
            <result property="modifiedAt" column="modified_at"/>
        </association>
    </resultMap>

    <!--시큐리티 쿼리-->
    <select id="findMemberById" resultMap="memberResultMap">
        SELECT m.*, ma.*, a.SAVED_NAME
        FROM MEMBER m
        LEFT JOIN MEM_ADDRESS ma ON m.member_no = ma.member_no
        LEFT JOIN (
            SELECT TARGET_NO, SAVED_NAME
            FROM ATTACHMENT
            WHERE TYPE_CODE = 'MEM'
            AND FILE_NO = (
                SELECT MAX(FILE_NO)
                FROM ATTACHMENT
                WHERE TYPE_CODE = 'MEM'
                AND TARGET_NO = ATTACHMENT.TARGET_NO
            )
        ) a ON m.member_no = a.TARGET_NO
        WHERE m.member_id = #{memberId}
        AND m.is_deleted = 'N'
    </select>

    <select id="findMemberByNickname" resultType="memberDTO">
        SELECT nickname
        FROM MEMBER
        WHERE nickname = #{nickname}
        AND is_deleted = 'N'
    </select>

    <insert id="signup" parameterType="memberDTO" useGeneratedKeys="true" keyProperty="memberNo">
        INSERT INTO MEMBER (member_id, member_pw, nickname, phone, email) VALUES
        (#{memberId}, #{memberPw}, #{nickname}, #{phone}, #{email})
    </insert>

    <insert id="insertProfileImg" parameterType="attachmentDTO">
        INSERT INTO ATTACHMENT (ORIGINAL_NAME, SAVED_NAME, TYPE_CODE, TARGET_NO) VALUES
        (#{originalName}, #{savedName}, #{typeCode}, #{targetNo})
    </insert>

    <select id="selectLastInsertId" resultType="int">
        <!-- LAST_INSERT_ID(): MySQL에서 마지막으로 AUTO_INCREMENT된 값을 반환하는 함수 -->
        SELECT LAST_INSERT_ID()
    </select>

    <insert id="insertBusReg" parameterType="memBusDTO">
        INSERT INTO MEM_BUS (member_no, business_number, representative_name, opening_date) VALUES
        (#{memberNo}, #{businessNumber}, #{representativeName}, #{openingDate})
    </insert>

    <insert id="insertAttachment" parameterType="attachmentDTO">
        INSERT INTO ATTACHMENT (type_code, target_no, original_name, saved_name) VALUES
        (#{typeCode}, #{targetNo}, #{originalName}, #{savedName})
    </insert>

    <select id="findCodeByAddress" parameterType="memAddressDTO" resultType="long">
        SELECT location_code
        FROM LOCATION
        WHERE
            si_do_name = #{siDoName}
            AND si_gun_gu_name LIKE CONCAT(#{siGunGuName}, '%')
            AND eup_myeon_dong_name = #{eupMyeonDongName}
    </select>

    <insert id="insertAddress" parameterType="memAddressDTO">
        INSERT INTO MEM_ADDRESS (member_no, si_do_name, si_gun_gu_name, eup_myeon_dong_name, detail_address, location_code) VALUES
        (#{memberNo}, #{siDoName}, #{siGunGuName}, #{eupMyeonDongName}, #{detailAddress}, #{locationCode})
    </insert>

    <update id="updateAddress" parameterType="memAddressDTO">
        UPDATE MEM_ADDRESS
        SET
            si_do_name = #{siDoName},
            si_gun_gu_name = #{siGunGuName},
            eup_myeon_dong_name = #{eupMyeonDongName},
            detail_address = #{detailAddress},
            location_code = #{locationCode},
            modified_at = CURRENT_TIMESTAMP
        WHERE member_no = #{memberNo}
    </update>

    <update id="updateProfileImg" parameterType="attachmentDTO">
        UPDATE ATTACHMENT
        SET
            ORIGINAL_NAME = #{originalName},
            SAVED_NAME = #{savedName}
        WHERE
            TYPE_CODE = #{typeCode}
            AND TARGET_NO = #{targetNo}
    </update>

    <update id="updateMember" parameterType="attachmentDTO">
        UPDATE MEMBER
        SET modified_at = CURRENT_TIMESTAMP
        WHERE member_no = #{targetNo}
    </update>

    <update id="updateNickname" parameterType="memberDTO">
        UPDATE MEMBER
        SET
            nickname = #{nickname},
            modified_at = CURRENT_TIMESTAMP
        WHERE member_no = #{memberNo}
    </update>

    <update id="updateEmail" parameterType="memberDTO">
        UPDATE MEMBER
        SET
            email = #{email},
            modified_at = CURRENT_TIMESTAMP
        WHERE member_no = #{memberNo}
    </update>

    <update id="updatePhone" parameterType="memberDTO">
        UPDATE MEMBER
        SET
            phone = #{phone},
            modified_at = CURRENT_TIMESTAMP
        WHERE member_no = #{memberNo}
    </update>

    <update id="updateMemberPw" parameterType="memberDTO">
        UPDATE MEMBER
        SET
            member_pw = #{memberPw},
            modified_at = CURRENT_TIMESTAMP
        WHERE member_no = #{memberNo}
    </update>

    <select id="selectNewsBoard" parameterType="int" resultType="java.util.LinkedHashMap">
        SELECT
            nc.category_name,
            l.eup_myeon_dong_name,
            np.title,
            np.created_at,
            np.views
        FROM NS_POST np
        JOIN NS_CATEGORY nc ON np.category_code = nc.category_code
        JOIN LOCATION l ON np.location_code = l.location_code
        WHERE np.writer = #{memberNo}
    </select>

    <select id="selectNewsLike" parameterType="int" resultType="java.util.LinkedHashMap">
        SELECT
            nc.category_name,
            l.eup_myeon_dong_name,
            np.title,
            np.created_at,
            m.nickname,
            np.views
        FROM NS_LIKE nl
        JOIN NS_POST np ON nl.news_no = np.news_no
        JOIN NS_CATEGORY nc ON np.category_code = nc.category_code
        JOIN LOCATION l ON np.location_code = l.location_code
        JOIN MEMBER m ON np.writer = m.member_no
        WHERE nl.member_no = #{memberNo}
    </select>

    <select id="selectNewsReply" parameterType="int" resultType="java.util.LinkedHashMap">
        SELECT
            nc.category_name,
            l.eup_myeon_dong_name,
            np.title,
            nr.content,
            nr.created_at
        FROM NS_REPLY nr
        JOIN NS_POST np ON nr.news_no = np.news_no
        JOIN NS_CATEGORY nc ON np.category_code = nc.category_code
        JOIN LOCATION l ON np.location_code = l.location_code
        WHERE nr.writer = #{memberNo}
    </select>

    <select id="selectClub" parameterType="int" resultType="java.util.LinkedHashMap">
        SELECT
            cc.category_name,
            l.eup_myeon_dong_name,
            c.club_name,
            m.nickname,
            c.created_at
        FROM CL c
        JOIN CL_CATEGORY cc ON c.category_code = cc.category_code
        JOIN LOCATION l ON c.location_code = l.location_code
        JOIN MEMBER m ON c.master = m.member_no
        WHERE c.master = #{memberNo}
    </select>

    <select id="selectClubLog" parameterType="int" resultType="java.util.LinkedHashMap">
        SELECT
            cc.category_name,
            l.eup_myeon_dong_name,
            c.club_name,
            cl.title,
            cl.created_at,
            cl.views
        FROM CL_LOG cl
        JOIN CL c ON cl.club_no = c.club_no
        JOIN CL_CATEGORY cc ON c.category_code = cc.category_code
        JOIN LOCATION l ON c.location_code = l.location_code
        WHERE cl.writer = #{memberNo}
    </select>

    <select id="selectClubSchedule" parameterType="int" resultType="java.util.LinkedHashMap">
        SELECT
            cc.category_name,
            l.eup_myeon_dong_name,
            c.club_name,
            cs.title,
            m.nickname,
            cs.gathering_at
        FROM CL_SCHEDULE cs
        JOIN CL c ON cs.club_no = c.club_no
        JOIN CL_CATEGORY cc ON c.category_code = cc.category_code
        JOIN LOCATION l ON c.location_code = l.location_code
        JOIN MEMBER m ON cs.maker = m.member_no
        WHERE cs.maker = #{memberNo}
    </select>

    <select id="selectShareLike" parameterType="int" resultType="java.util.LinkedHashMap">
        SELECT
            sc.cat_name,
            l.eup_myeon_dong_name,
            si.title,
            si.expiry_date,
            ss.status_name
        FROM SHA_LIKE sl
        JOIN SHA_ITEMS si ON sl.item_no = si.item_no
        JOIN SHA_CAT sc ON si.item_cat_code = sc.cat_code
        JOIN LOCATION l ON si.loc_code = l.location_code
        JOIN SHA_STATUS ss ON si.status_code = ss.status_code
        WHERE sl.member_no = #{memberNo}
    </select>

    <select id="selectSaleBoard" parameterType="int" resultType="java.util.LinkedHashMap">
        SELECT
            l.eup_myeon_dong_name,
            s.title,
            s.original_price,
            s.sale_price,
            s.created_at,
            s.started_at,
            s.ended_at
        FROM SAL s
        JOIN LOCATION l ON s.location_code = l.location_code
        WHERE s.writer = #{memberNo}
    </select>

</mapper>
